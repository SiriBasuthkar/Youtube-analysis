import React from 'react';
import { CheckCircle, AlertCircle, XCircle, BarChart3, FileText, Calendar, Youtube, Download, Share2 } from 'lucide-react';
import type { AnalysisResult } from '../App';

interface ResultsProps {
  result: AnalysisResult;
}

const Results: React.FC<ResultsProps> = ({ result }) => {
  const coveredTopics = result.subtopics.filter(s => s.status === 'covered');
  const partialTopics = result.subtopics.filter(s => s.status === 'partial');
  const missingTopics = result.subtopics.filter(s => s.status === 'missing');

  const generateReportData = () => {
    const reportData = {
      videoTitle: result.title,
      topic: result.topic,
      analysisDate: result.analysisDate,
      overallScore: result.overallScore,
      transcriptLength: result.transcriptLength,
      summary: {
        totalSubtopics: result.subtopics.length,
        coveredTopics: coveredTopics.length,
        partialTopics: partialTopics.length,
        missingTopics: missingTopics.length
      },
      detailedAnalysis: result.subtopics.map(subtopic => ({
        name: subtopic.name,
        coverage: subtopic.coverage,
        status: subtopic.status,
        keywords: subtopic.keywords
      })),
      recommendations: generateRecommendations()
    };
    return reportData;
  };

  const generateRecommendations = () => {
    const recommendations = [];
    
    if (result.overallScore >= 80) {
      recommendations.push("This video provides excellent coverage of the topic and is highly recommended for learning.");
    } else if (result.overallScore >= 60) {
      recommendations.push("This video covers most key concepts but may need supplementation for complete understanding.");
    } else {
      recommendations.push("This video has significant gaps and should be supplemented with additional resources.");
    }

    if (missingTopics.length > 0) {
      recommendations.push(`Consider finding additional resources for: ${missingTopics.map(t => t.name).join(', ')}`);
    }

    if (partialTopics.length > 0) {
      recommendations.push(`These topics need deeper coverage: ${partialTopics.map(t => t.name).join(', ')}`);
    }

    return recommendations;
  };

  const downloadReport = () => {
    const reportData = generateReportData();
    
    // Create a comprehensive text report
    const reportText = `
EDUCATIONAL CONTENT ANALYSIS REPORT
=====================================

Video Information:
- Title: ${reportData.videoTitle}
- Topic: ${reportData.topic}
- Analysis Date: ${reportData.analysisDate}
- Transcript Length: ${reportData.transcriptLength.toLocaleString()} characters

Overall Assessment:
- Coverage Score: ${reportData.overallScore}%
- Total Subtopics Analyzed: ${reportData.summary.totalSubtopics}

Coverage Summary:
- Well Covered (â‰¥80%): ${reportData.summary.coveredTopics} topics
- Partially Covered (40-79%): ${reportData.summary.partialTopics} topics
- Missing Content (<40%): ${reportData.summary.missingTopics} topics

Detailed Analysis:
${reportData.detailedAnalysis.map(item => `
${item.name}:
  - Coverage: ${item.coverage}%
  - Status: ${item.status.charAt(0).toUpperCase() + item.status.slice(1)}
  - Keywords: ${item.keywords.join(', ')}
`).join('')}

Recommendations:
${reportData.recommendations.map((rec, index) => `${index + 1}. ${rec}`).join('\n')}

---
Generated by EduVideo Analyzer
Educational Content Evaluation Platform
    `.trim();

    // Create and download the file
    const blob = new Blob([reportText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `analysis-report-${result.topic.replace(/\s+/g, '-').toLowerCase()}-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const shareReport = async () => {
    const shareText = `Educational Content Analysis: "${result.title}" scored ${result.overallScore}% coverage for ${result.topic}. ${coveredTopics.length}/${result.subtopics.length} topics well covered.`;
    
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'Educational Content Analysis Report',
          text: shareText,
          url: window.location.href
        });
      } catch (error) {
        // Fallback to clipboard if share fails
        navigator.clipboard.writeText(shareText).then(() => {
          alert('Report summary copied to clipboard!');
        });
      }
    } else {
      // Fallback: copy to clipboard
      navigator.clipboard.writeText(shareText).then(() => {
        alert('Report summary copied to clipboard!');
      });
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'covered':
        return <CheckCircle className="h-5 w-5 text-emerald-600" />;
      case 'partial':
        return <AlertCircle className="h-5 w-5 text-amber-600" />;
      case 'missing':
        return <XCircle className="h-5 w-5 text-red-600" />;
      default:
        return null;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'covered':
        return 'text-emerald-700 bg-emerald-100';
      case 'partial':
        return 'text-amber-700 bg-amber-100';
      case 'missing':
        return 'text-red-700 bg-red-100';
      default:
        return 'text-gray-700 bg-gray-100';
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-emerald-600';
    if (score >= 60) return 'text-amber-600';
    return 'text-red-600';
  };

  const getScoreBg = (score: number) => {
    if (score >= 80) return 'bg-emerald-600';
    if (score >= 60) return 'bg-amber-600';
    return 'bg-red-600';
  };

  return (
    <div className="max-w-6xl mx-auto space-y-8">
      {/* Header */}
      <div className="text-center">
        <h2 className="text-3xl font-bold text-gray-900 mb-4">Analysis Results</h2>
        <p className="text-lg text-gray-600">
          Comprehensive educational content evaluation for your YouTube video
        </p>
      </div>

      {/* Overall Score Card */}
      <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-8">
        <div className="text-center">
          <div className="relative inline-flex items-center justify-center w-32 h-32 mb-6">
            <svg className="w-32 h-32 transform -rotate-90" viewBox="0 0 36 36">
              <path
                d="m18,2.0845 a 15.9155,15.9155 0 0,1 0,31.831 a 15.9155,15.9155 0 0,1 0,-31.831"
                fill="none"
                stroke="#e5e7eb"
                strokeWidth="2"
              />
              <path
                d="m18,2.0845 a 15.9155,15.9155 0 0,1 0,31.831 a 15.9155,15.9155 0 0,1 0,-31.831"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeDasharray={`${result.overallScore}, 100`}
                className={getScoreColor(result.overallScore)}
              />
            </svg>
            <div className="absolute inset-0 flex items-center justify-center">
              <span className={`text-2xl font-bold ${getScoreColor(result.overallScore)}`}>
                {result.overallScore}%
              </span>
            </div>
          </div>
          <h3 className="text-2xl font-bold text-gray-900 mb-2">Overall Coverage Score</h3>
          <p className="text-gray-600">
            This video covers <span className="font-semibold">{result.overallScore}%</span> of the expected educational content
          </p>
        </div>
      </div>

      {/* Video Information */}
      <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-6">
        <div className="flex items-center space-x-4 mb-6">
          <div className="bg-red-100 p-3 rounded-lg">
            <Youtube className="h-6 w-6 text-red-600" />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-gray-900">{result.title}</h3>
            <p className="text-gray-600">Educational Topic: {result.topic}</p>
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="flex items-center space-x-3">
            <Calendar className="h-5 w-5 text-gray-400" />
            <div>
              <p className="text-sm font-medium text-gray-900">Analysis Date</p>
              <p className="text-sm text-gray-600">{result.analysisDate}</p>
            </div>
          </div>
          <div className="flex items-center space-x-3">
            <FileText className="h-5 w-5 text-gray-400" />
            <div>
              <p className="text-sm font-medium text-gray-900">Transcript Length</p>
              <p className="text-sm text-gray-600">{result.transcriptLength.toLocaleString()} characters</p>
            </div>
          </div>
          <div className="flex items-center space-x-3">
            <BarChart3 className="h-5 w-5 text-gray-400" />
            <div>
              <p className="text-sm font-medium text-gray-900">Topics Analyzed</p>
              <p className="text-sm text-gray-600">{result.subtopics.length} subtopics</p>
            </div>
          </div>
        </div>
      </div>

      {/* Coverage Summary */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-6">
          <div className="flex items-center space-x-3 mb-4">
            <CheckCircle className="h-6 w-6 text-emerald-600" />
            <h3 className="text-lg font-semibold text-gray-900">Well Covered</h3>
          </div>
          <div className="text-center">
            <p className="text-3xl font-bold text-emerald-600 mb-2">{coveredTopics.length}</p>
            <p className="text-sm text-gray-600">Topics with 80%+ coverage</p>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-6">
          <div className="flex items-center space-x-3 mb-4">
            <AlertCircle className="h-6 w-6 text-amber-600" />
            <h3 className="text-lg font-semibold text-gray-900">Partially Covered</h3>
          </div>
          <div className="text-center">
            <p className="text-3xl font-bold text-amber-600 mb-2">{partialTopics.length}</p>
            <p className="text-sm text-gray-600">Topics with 40-79% coverage</p>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-6">
          <div className="flex items-center space-x-3 mb-4">
            <XCircle className="h-6 w-6 text-red-600" />
            <h3 className="text-lg font-semibold text-gray-900">Missing Content</h3>
          </div>
          <div className="text-center">
            <p className="text-3xl font-bold text-red-600 mb-2">{missingTopics.length}</p>
            <p className="text-sm text-gray-600">Topics with &lt;40% coverage</p>
          </div>
        </div>
      </div>

      {/* Detailed Subtopic Analysis */}
      <div className="bg-white rounded-xl shadow-sm border border-slate-200">
        <div className="px-6 py-4 border-b border-slate-200">
          <h3 className="text-lg font-semibold text-gray-900">Detailed Topic Coverage</h3>
        </div>
        <div className="divide-y divide-slate-200">
          {result.subtopics.map((subtopic, index) => (
            <div key={index} className="px-6 py-4">
              <div className="flex items-center justify-between mb-3">
                <div className="flex items-center space-x-3">
                  {getStatusIcon(subtopic.status)}
                  <h4 className="font-medium text-gray-900">{subtopic.name}</h4>
                </div>
                <div className="flex items-center space-x-3">
                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(subtopic.status)}`}>
                    {subtopic.status.charAt(0).toUpperCase() + subtopic.status.slice(1)}
                  </span>
                  <span className="text-lg font-bold text-gray-900">{subtopic.coverage}%</span>
                </div>
              </div>
              
              <div className="w-full bg-gray-200 rounded-full h-2 mb-3">
                <div
                  className={`h-2 rounded-full ${getScoreBg(subtopic.coverage)}`}
                  style={{ width: `${subtopic.coverage}%` }}
                ></div>
              </div>
              
              <div className="flex flex-wrap gap-2">
                {subtopic.keywords.map((keyword, keyIndex) => (
                  <span
                    key={keyIndex}
                    className="px-2 py-1 bg-blue-50 text-blue-700 text-xs rounded-md"
                  >
                    {keyword}
                  </span>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Action Buttons */}
      <div className="flex flex-wrap gap-4 justify-center">
        <button className="flex items-center space-x-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium">
          {downloadReport}
          <Download className="h-5 w-5" />
        </button>
        <button 
          onClick={shareReport}
          className="flex items-center space-x-2 px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors font-medium">
          <Share2 className="h-5 w-5" />
          <span>Share Results</span>
        </button>
        <button className="flex items-center space-x-2 px-6 py-3 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 transition-colors font-medium">
          <Youtube className="h-5 w-5" />
          <span>Analyze Another Video</span>
        </button>
      </div>
    </div>
  );
};

export default Results;